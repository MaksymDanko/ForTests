{
	"info": {
		"_postman_id": "51b2ead3-4403-4990-9bcd-a7275646f21c",
		"name": "CollectionForTestTask",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [{
			"name": "Members",
			"event": [{
				"listen": "test",
				"script": {
					"exec": [
						"pm.test(\"Members response status code is 200\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"pm.test('Members JSON Schema is valid', function() {",
						"    pm.response.to.have.jsonSchema(pm.response.json());",
						"});",
						"",
						"pm.test(\"Members Status is OK\", function () {",
						"    pm.response.to.have.status(\"OK\")",
						"});",
						"",
						"pm.test(\"Members response time is less than 500ms\", function () {",
						"    pm.expect(pm.response.responseTime).to.be.below(500);",
						"});",
						"",
						"pm.test(\"Content-Type is application/json\", function () {",
						"    pm.response.to.have.header(\"Content-Type\");",
						"    let contentType = pm.response.headers.get(\"Content-Type\");",
						"    pm.expect(contentType).to.include(\"application/json\");",
						"});",
						"",
						"pm.test(\"Members status value is success\", function () {",
						"    pm.expect(pm.response.json().status).to.eql(\"success\");",
						"});",
						"",
						"pm.test(\"Members data is an object\", function () {",
						"    pm.expect(pm.response.json().data).to.be.an('object');",
						"  });",
						"",
						"pm.test(\"Members has an array with members\", function () {",
						"    pm.expect(pm.response.json().data.members).to.be.an('array');",
						"  });"
					],
					"type": "text/javascript"
				}
			}],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://demo8955896.mockable.io/members",
					"protocol": "http",
					"host": [
						"demo8955896",
						"mockable",
						"io"
					],
					"path": [
						"members"
					]
				}
			},
			"response": []
		},
		{
			"name": "Members Details",
			"event": [{
				"listen": "test",
				"script": {
					"exec": [
						"pm.test(\"Member's details response status code\", function () {",
						"    pm.response.to.have.status(200);",
						"});",
						"",
						"pm.test(\"Member's details JSON Schema is valid\", function() {",
						"    pm.response.to.have.jsonSchema(pm.response.json());",
						"});",
						"",
						"pm.test(\"Member's details Status is OK\", function () {",
						"    pm.response.to.have.status(\"OK\")",
						"});",
						"",
						"pm.test(\"Members details response time is less than 500ms\", function () {",
						"    pm.expect(pm.response.responseTime).to.be.below(500);",
						"});",
						"",
						"pm.test(\"Content-Type is application/json\", function () {",
						"    pm.response.to.have.header(\"Content-Type\");",
						"    let contentType = pm.response.headers.get(\"Content-Type\");",
						"    pm.expect(contentType).to.include(\"application/json\");",
						"});",
						"",
						"pm.test(\"Members details status value is success\", function () {",
						"    pm.expect(pm.response.json().status).to.eql(\"success\");",
						"});",
						"",
						"pm.test(\"Member's details data is an object\", function () {",
						"    pm.expect(pm.response.json().data).to.be.an('object');",
						"  });"
					],
					"type": "text/javascript"
				}
			}],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://demo8955896.mockable.io/member/025a626c4c9c",
					"protocol": "https",
					"host": [
						"demo8955896",
						"mockable",
						"io"
					],
					"path": [
						"member",
						"025a626c4c9c"
					]
				}
			},
			"response": []
		}
	]
}
